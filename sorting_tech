class Solution {
public:
    //Merge Sort
    // void merge(vector<int>& nums,int low,int mid,int high){
    //     vector<int>temp;
    //     int l=low;
    //     int r=mid+1;
    //     while(l<=mid && r<=high){
    //         if(nums[l]<nums[r]){
    //             temp.push_back(nums[l]);
    //             l++;
    //         }
    //         else{
    //             temp.push_back(nums[r]);
    //             r++;
    //         }
    //     }
    //     while(l<=mid){
    //         temp.push_back(nums[l]);
    //         l++;
    //     }
    //     while(r<=high){
    //         temp.push_back(nums[r]);
    //         r++;
    //     }
    //     for(int i=low;i<=high;i++){
    //         nums[i]=temp[i-low];
    //     }
    // }
    // void mergeSort(vector<int>& nums,int low,int high){
    //     if(low>=high) return;
    //     int mid=low+(high-low)/2;
    //     mergeSort(nums,low,mid);
    //     mergeSort(nums,mid+1,high);
    //     merge(nums,low,mid,high);
    // }
    // int f(vector<int>& nums,int low,int high){
    //     int pivot=nums[low];
    //     int i=low,j=high;
    //     int cnt=0;
    //     for(int i=low+1;i<=high;i++){
    //         if(nums[i]<=pivot){
    //             cnt++;
    //         }
    //     }
    //     int pi=low+cnt;
    //     swap(nums[pi],nums[low]);
    //     while(i<pi && j>pi){
    //         while(nums[i]<=pivot){
    //             i++;
    //         }
    //         while(nums[j]>pivot){
    //             j--;
    //         }
    //         if(i<pi && j>pi){
    //             swap(nums[i++],nums[j--]);
    //         }
    //     }
    //    return pi;
    // }
    // void quickSort(vector<int>& nums,int low,int high){
    //     if(low<high){
    //         int partition=f(nums,low,high);
    //         quickSort(nums,low,partition-1);
    //         quickSort(nums,partition+1,high);
    //     }
    // }
    void heapify(vector<int>& nums,int i,int n){
        int largest=i;
        int l=2*i+1;
        int r=2*i+2;
        if(l<n && nums[l]>nums[largest]){
            largest=l;
        }
        if(r<n && nums[r]>nums[largest]){
            largest=r;
        }
        if(largest!=i){
            swap(nums[largest],nums[i]);
            heapify(nums,largest,n);
        }
    }
    void heapSort(vector<int>& nums,int n){
        for(int i=n/2-1;i>=0;i--){
            heapify(nums,i,n);
        }
        for(int i=n-1;i>0;i--){
            swap(nums[i],nums[0]);
            heapify(nums,0,i);
        }
    }
    vector<int> sortArray(vector<int>& nums) {
        //Merge Sort
        // int high=nums.size()-1;
        // int low=0;
        // mergeSort(nums,low,high);
        // return nums;

        //Quick Sort
        // int high=nums.size()-1;
        // int low=0;
        // quickSort(nums,low,high);
        // return nums;

        //Heap Sort
        int size=nums.size();
        heapSort(nums,size);
        return nums;
    }
};
